DropBox Project Phase-1 Report
=============================

Threadpool and Queue Design & Synchronization Choices
-----------------------------------------------------

1. **Threadpool Architecture**
   - The server uses two threadpools: a client threadpool and a worker threadpool.
   - The client threadpool (default: 10 threads) handles accepted client connections, performs authentication, and parses commands.
   - The worker threadpool (default: 5 threads) processes file operation tasks (UPLOAD, DOWNLOAD, DELETE, LIST) from the global task queue.
   - This separation ensures that client threads do not block on heavy disk I/O or file operations, improving responsiveness and scalability.

2. **Queue Design**
   - The server maintains two main queues:
     - **Client Queue:** Holds accepted socket descriptors for incoming connections. Client threads dequeue sockets to handle sessions.
     - **Task Queue:** Holds tasks generated by client threads (e.g., file operations). Worker threads dequeue and execute these tasks.
   - Both queues are implemented as circular buffers for efficient enqueue/dequeue operations.

3. **Synchronization Choices**
   - **Mutexes:**
     - Each queue is protected by a dedicated mutex to ensure thread-safe access during enqueue and dequeue operations.
     - Tasks have individual mutexes for status updates and result delivery.
   - **Condition Variables:**
     - Used to block threads when queues are empty/full and wake them when state changes (not_empty, not_full).
     - Ensures efficient thread waiting and notification without busy-waiting.
   - **Shutdown Handling:**
     - A global shutdown flag and mutex coordinate graceful server shutdown, signaling all threads to exit.
   - **File Locks:**
     - Per-file locks prevent concurrent conflicting operations on the same file by different threads.

4. **Design Rationale**
   - The producer-consumer model (client threads produce tasks, worker threads consume them) enables scalable, concurrent file operations.
   - Synchronization primitives prevent race conditions, deadlocks, and ensure data integrity.
   - The design is robust for single-session operation and forms a solid foundation for future multi-session and advanced features.

